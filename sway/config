# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.
# references:
# - https://github.com/fosskers/dotfiles/blob/master/.config/sway/config


### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term alacritty
# set $term terminator
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# set $menu dmenu_path | dmenu | xargs swaymsg exec 
# set $menu bemenu-run --no-exec | xargs swaymsg exec --
set $menu wofi --show=drun --lines=5 --prompt=""


### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output "*" background /home/suliman/Pictures/wallpapers/1187136.jpg fill
# exec_always swaybg -i /home/suliman/Pictures/wallpapers/1187136.jpg
#
# Example configuration:
#
   output DVI-I-1 resolution 1920x1080 position 0,0
   output HDMI-A-1 resolution 2560x1440  position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs


exec swaymsg focus output HDMI-A-1

focus_follows_mouse no


# Disable XWayland entirely and rin a "pure" Wayland session.
# xwayland disable

# Enable numlock and caplock 
# input * xkb_capslock disable
# input * xkb_numlock enable
input "4152:5648:SteelSeries_SteelSeries_Apex_Pro" {
    # Enable numlock when sway starts.
    xkb_numlock enable
    # Set up compose keys.
    xkb_options compose:rctrl
}

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

# Lock  screen after 30 minutes and turn it off 5 second after
exec_always ~/.config/scripts/lock.sh

#for_window [class="vlc"] inhibit_idle fullscreen
for_window [app_id="vlc"] inhibit_idle fullscreen
# exec swayidle -w \
# 	timeout 1800 'swaylock -f' \
# 	timeout 1805 'swaymsg "output * dpms off"' \
# 	resume 'swaymsg "output * dpms on"' \

### Input configuration
#

# Switching Keyboard layouts EN, AR
input "4152:5648:SteelSeries_SteelSeries_Apex_Pro" {
# input type:keyboard {
    xkb_layout us,ar
    xkb_options grp:alt_shift_toggle
}
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu


    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+r reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'

    # Exit sway (logs you out of your Wayland session)
    bindsym --to-code $mod+Delete exec swaynag -t mtype -m \
    'You pressed the exit shortcut. What do you want?' \
    -b 'Poweroff' 'systemctl poweroff' \
    -b 'Reboot' 'systemctl reboot' \
    -b 'Sleep' 'systemctl suspend' \
    -b 'Logout' 'swaymsg exit'

#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Define names for default workspaces for which we configure key bindings later on.
    # We use variables to avoid repeating the names in multiple places.
    set $ws1 1
    set $ws2 2
    set $ws3 3
    set $ws4 4
    set $ws5 5
    set $ws6 6
    set $ws7 7
    set $ws8 8
    set $ws9 9
    set $ws10 10

    # switch to workspace
    bindsym $mod+1 workspace number $ws1
    bindsym $mod+2 workspace number $ws2
    bindsym $mod+3 workspace number $ws3
    bindsym $mod+4 workspace number $ws4
    bindsym $mod+5 workspace number $ws5
    bindsym $mod+6 workspace number $ws6
    bindsym $mod+7 workspace number $ws7
    bindsym $mod+8 workspace number $ws8
    bindsym $mod+9 workspace number $ws9
    bindsym $mod+0 workspace number $ws10

    # move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number $ws1
    bindsym $mod+Shift+2 move container to workspace number $ws2
    bindsym $mod+Shift+3 move container to workspace number $ws3
    bindsym $mod+Shift+4 move container to workspace number $ws4
    bindsym $mod+Shift+5 move container to workspace number $ws5
    bindsym $mod+Shift+6 move container to workspace number $ws6
    bindsym $mod+Shift+7 move container to workspace number $ws7
    bindsym $mod+Shift+8 move container to workspace number $ws8
    bindsym $mod+Shift+9 move container to workspace number $ws9
    bindsym $mod+Shift+0 move container to workspace number $ws10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
 
    bindsym $mod+Tab workspace back_and_forth

    # The only thing we use Alacritty for us launching
    # the stats viewer.
    # Assign application to start on a specific workspace xprop
    assign [class="firefox"] $ws2
    assign [class="firefoxdeveloperedition"] $ws2
    assign [class="^Code$"] $ws3
    assign [class="^Spotify$"] $ws4
    for_window [class="firefoxdeveloperedition"] move to workspace $sw2
    for_window [class="firefox"] move to workspace $sw2
    for_window [class="Code"] move to workspace $ws3
    for_window [class="Spotify"] move to workspace $ws4
    for_window [class="Spotify"] exec "sleep .1; pkill -RTMIN+4 waybar"

    # Switch to workspace
    # bindsym $mod+1 workspace number 1
    # bindsym $mod+2 workspace number 2
    # bindsym $mod+3 workspace number 3
    # bindsym $mod+4 workspace number 4
    # bindsym $mod+5 workspace number 5
    # bindsym $mod+6 workspace number 6
    # bindsym $mod+7 workspace number 7
    # bindsym $mod+8 workspace number 8
    # bindsym $mod+9 workspace number 9
    # bindsym $mod+0 workspace number 10
    # # Move focused container to workspace
    # bindsym $mod+Shift+1 move container to workspace number 1
    # bindsym $mod+Shift+2 move container to workspace number 2
    # bindsym $mod+Shift+3 move container to workspace number 3
    # bindsym $mod+Shift+4 move container to workspace number 4
    # bindsym $mod+Shift+5 move container to workspace number 5
    # bindsym $mod+Shift+6 move container to workspace number 6
    # bindsym $mod+Shift+7 move container to workspace number 7
    # bindsym $mod+Shift+8 move container to workspace number 8
    # bindsym $mod+Shift+9 move container to workspace number 9
    # bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show

        # Color picker
    bindsym --to-code $mod+p exec swaynag -t mtype -m "$(grim -g "$(slurp -p)" -t ppm - | convert - -format '%[pixel:p{0,0}]' txt:-)" && notify-send "Color picked"

    # Take a screenshot to clipboard (whole screen)
    bindsym --to-code Print exec grim - | wl-copy && notify-send "Screenshot of whole screen saved to clipboard"

    # Take a screenshot of selected region to clipboard
    bindsym --to-code $mod+Print exec grim -g "$(slurp)" - | wl-copy && notify-send "Screenshot of selected region saved to clipboard"
        
    # Take a screenshot of focused window to clipboard
    bindsym --to-code $mod+Shift+Print exec grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')" - | wl-copy && notify-send "Screenshot of active window saved to clipboard"


    # Take a screenshot (whole screen)
    bindsym --to-code Ctrl+Print exec grim ~/Pictures/screenshots/screenshot-"$(date +%s)".png && notify-send "Screenshot of whole screen saved to folder"

    # Take a screenshot of selected region
    bindsym --to-code $mod+Ctrl+Print exec grim -g "$(slurp)" ~/Pictures/screenshots/screenshot-"$(date +%s)".png && notify-send "Screenshot of selected region saved to folder"
        
    # Take a screenshot of focused window
    bindsym --to-code $mod+Ctrl+Shift+Print exec grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')" ~/Pictures/screenshot-"$(date +%s)".png && notify-send "Screenshot of active window saved to folder"

#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    font pango:DejaVu Sans Mono, Font Awesome 6 Free 12
    position top
    # status_command i3status-rs /home/suliman/.config/sway/config.toml
    # status_command i3blocks -c /home/suliman/.config/i3blocks/i3blocks.conf
    swaybar_command waybar

    colors {
        # separator #666666
        # background #222222
        # statusline #dddddd
        # focused_workspace #44475a #44475a #ffffff
        # active_workspace #333333 #333333 #ffffff
        # inactive_workspace #333333 #333333 #888888
        # urgent_workspace #2f343a #900000 #ffffff
        background #282A36
		statusline #F8F8F2
		separator  #44475A

		focused_workspace  #44475A #44475A #F8F8F2
		active_workspace   #282A36 #44475A #F8F8F2
		inactive_workspace #282A36 #282A36 #BFBFBF
		urgent_workspace   #FF5555 #FF5555 #F8F8F2
    }

    # When the status_command prints a new line to stdout, swaybar updates.
    # The default just shows the current date and time.
    # status_command while date +'%Y-%m-%d %I:%M:%S %p'; do sleep 1; done

    # colors {
    #     statusline #ffffff
    #     background #323232
    #     inactive_workspace #32323200 #32323200 #5c5c5c
    # }
}


floating_modifier	$mod		normal

client.focused		#282a36 #50fa7b #000000 #50fa7b #bd93f9
client.unfocused	#282a36 #44475a #F8F8F2 #44475a #44475a

client.focused_inactive #44475A #44475A #F8F8F2 #44475A   #44475A
client.urgent           #44475A #FF5555 #F8F8F2 #FF5555   #FF5555
client.placeholder      #282A36 #282A36 #F8F8F2 #282A36   #282A36

client.background       #F8F8F2

gaps inner 0

default_border pixel 1
font Hack 12px


# Bind keyboard shortcut key for Volume and midia control
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
bindsym XF86MonBrightnessDown exec brightnessctl set 5%-
bindsym XF86MonBrightnessUp exec brightnessctl set 5%+
bindsym XF86AudioPlay exec playerctl play-pause
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous
bindsym XF86Search exec bemenu-run



# By default, the clipboard is emptied whenever a window is closed. This can be a surprising default behaviour.
# to make the clipboard's content shared amongst windows using clipman designed for Wayland.
exec wl-paste -t text --watch clipman store --no-persist

# launch redshift
# exec --no-startup-id redshift &
# exec --no-startup-id /usr/bin/wlsunset -t 3500 -T 6000 -l 28,79 -L 48.08 -g 1 -S 06:30 -s 18:30

include /etc/sway/config.d/*
